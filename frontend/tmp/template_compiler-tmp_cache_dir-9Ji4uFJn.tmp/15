export default Ember.HTMLBars.template((function() {
  return {
    meta: {
      "revision": "Ember@2.0.2",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 0
        }
      },
      "moduleName": "tag-select/templates/components/tag-item.hbs"
    },
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createTextNode("// ");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("input");
      dom.setAttribute(el1,"type","checkbox");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("input");
      dom.setAttribute(el1,"type","checkbox");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("label");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(", ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [1]);
      if (this.cachedFragment) { dom.repairClonedNode(element0,[],true); }
      var element1 = dom.childAt(fragment, [3]);
      if (this.cachedFragment) { dom.repairClonedNode(element1,[],true); }
      var element2 = dom.childAt(fragment, [5]);
      var morphs = new Array(7);
      morphs[0] = dom.createAttrMorph(element0, 'id');
      morphs[1] = dom.createAttrMorph(element0, 'checked');
      morphs[2] = dom.createAttrMorph(element1, 'id');
      morphs[3] = dom.createAttrMorph(element1, 'checked');
      morphs[4] = dom.createAttrMorph(element2, 'for');
      morphs[5] = dom.createMorphAt(element2,1,1);
      morphs[6] = dom.createMorphAt(element2,3,3);
      return morphs;
    },
    statements: [
      ["attribute","id",["concat",[["get","tag.title",["loc",[null,[1,32],[1,41]]]]]]],
      ["attribute","checked",["concat",[["subexpr","if",[["get","tag.selected",["loc",[null,[1,59],[1,71]]]],"checked"],[],["loc",[null,[1,54],[1,83]]]]]]],
      ["attribute","id",["concat",[["get","tag.title",["loc",[null,[2,29],[2,38]]]]]]],
      ["attribute","checked",["concat",[["subexpr","if",[["get","tag.selected",["loc",[null,[2,56],[2,68]]]],"checked"],[],["loc",[null,[2,51],[2,80]]]]]]],
      ["attribute","for",["concat",[["get","tag.title",["loc",[null,[3,14],[3,23]]]]]]],
      ["content","tag.title",["loc",[null,[4,2],[4,15]]]],
      ["content","tag.selected",["loc",[null,[4,17],[4,33]]]]
    ],
    locals: [],
    templates: []
  };
}()));